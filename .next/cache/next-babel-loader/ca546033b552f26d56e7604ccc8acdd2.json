{"ast":null,"code":"import { getPosts, getPost, hideLoader, showLoader, showAlert, hideAlert, createPost } from '../types/types';\nimport axios from 'axios';\nexport function ShowAlert(text, type) {\n  return dispatch => {\n    dispatch({\n      type: showAlert,\n      payload: {\n        text,\n        type\n      }\n    });\n    setTimeout(() => {\n      dispatch(HideAlert());\n    }, 3000);\n  };\n}\n\nfunction HideAlert() {\n  return {\n    type: hideAlert\n  };\n}\n\nexport function ShowLoader() {\n  return {\n    type: showLoader\n  };\n}\nexport function HideLoader() {\n  return {\n    type: hideLoader\n  };\n}\nexport function actionGetPosts(limit) {\n  return async dispatch => {\n    try {\n      dispatch(ShowLoader());\n      const data = await axios.get(`https://simple-blog-api.crew.red/posts?_limit=${limit}`);\n      dispatch({\n        type: getPosts,\n        payload: data.data\n      });\n      dispatch(HideLoader());\n    } catch (e) {\n      dispatch(ShowAlert(e.message, 'error'));\n      dispatch(HideLoader);\n    }\n  };\n}\nexport function actionGetPost(id) {\n  return async dispatch => {\n    try {\n      dispatch(ShowLoader());\n      const data = await axios.get(`https://simple-blog-api.crew.red/posts/${id}`);\n      dispatch({\n        type: getPost,\n        payload: data.data\n      });\n      dispatch(HideLoader());\n    } catch (e) {\n      dispatch(ShowAlert(e.message, 'error'));\n      dispatch(HideLoader);\n    }\n  };\n}\nexport function actionCreatePost(text) {\n  return async dispatch => {\n    const middleware = await dispatch({\n      type: createPost,\n      payload: text.title\n    });\n\n    if (middleware === 'error') {\n      return;\n    }\n\n    try {\n      dispatch(ShowLoader());\n      const data = await axios({\n        method: 'post',\n        url: 'https://simple-blog-api.crew.red/posts',\n        data: {\n          title: text.title,\n          body: text.body\n        }\n      });\n      dispatch(HideLoader());\n      dispatch(ShowAlert('Post is created', 'success'));\n    } catch (e) {\n      dispatch(HideLoader);\n      dispatch(ShowAlert(e.message, 'error'));\n    }\n  };\n}","map":{"version":3,"sources":["D:/react/test-blog-project/redux/actions/actions.tsx"],"names":["getPosts","getPost","hideLoader","showLoader","showAlert","hideAlert","createPost","axios","ShowAlert","text","type","dispatch","payload","setTimeout","HideAlert","ShowLoader","HideLoader","actionGetPosts","limit","data","get","e","message","actionGetPost","id","actionCreatePost","middleware","title","method","url","body"],"mappings":"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","sourcesContent":["import {getPosts, getPost, hideLoader, showLoader, showAlert, hideAlert, createPost} from '../types/types'\r\nimport axios from 'axios'\r\n\r\n\r\n export function ShowAlert(text:string,type:string){\r\n    return dispatch=>{\r\n        dispatch({\r\n            type:showAlert,\r\n            payload:{\r\n                text,\r\n                type\r\n            }\r\n        })\r\n            setTimeout(()=>{\r\n                dispatch(HideAlert())\r\n            },3000)\r\n    }\r\n}\r\n\r\n function HideAlert(){\r\n    return{\r\n        type:hideAlert\r\n    }\r\n}\r\n\r\nexport function ShowLoader(){\r\n    return{\r\n        type:showLoader\r\n    }\r\n}\r\n\r\n export function HideLoader(){\r\n    return{\r\n        type:hideLoader\r\n    }\r\n}\r\n\r\nexport function actionGetPosts(limit:string | number){\r\n    return async dispatch=>{\r\n        try{\r\n          dispatch(ShowLoader())\r\n          const data = await axios.get(`https://simple-blog-api.crew.red/posts?_limit=${limit}`)\r\n            dispatch({type:getPosts,payload:data.data})\r\n            dispatch(HideLoader())\r\n        }\r\n        catch (e){\r\n          dispatch(ShowAlert(e.message,'error'))\r\n            dispatch(HideLoader)\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport function actionGetPost(id: string | string[]){\r\n    return async dispatch=>{\r\n        try{\r\n            dispatch(ShowLoader())\r\n            const data = await axios.get(`https://simple-blog-api.crew.red/posts/${id}`)\r\n            dispatch({type:getPost,payload:data.data})\r\n            dispatch(HideLoader())\r\n        }\r\n        catch (e){\r\n            dispatch(ShowAlert(e.message,'error'))\r\n            dispatch(HideLoader)\r\n        }\r\n    }\r\n}\r\ntype actionCreatePostTextType ={\r\n    title:string,\r\n    body:string\r\n}\r\nexport function actionCreatePost(text:actionCreatePostTextType){\r\n    return async dispatch=>{\r\n        const middleware =  await  dispatch({type:createPost,payload:text.title})\r\n        if (middleware === 'error'){\r\n            return\r\n        }\r\n        try{\r\n            dispatch(ShowLoader())\r\n            const data = await axios({\r\n                method: 'post',\r\n                url: 'https://simple-blog-api.crew.red/posts',\r\n                data: {\r\n                    title: text.title,\r\n                    body: text.body\r\n                }\r\n            })\r\n            dispatch(HideLoader())\r\n            dispatch(ShowAlert('Post is created','success'))\r\n        }\r\n        catch (e){\r\n            dispatch(HideLoader)\r\n            dispatch(ShowAlert(e.message,'error'))\r\n        }\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}